/*  
 Resolver el caso estacionario y el evolutivo con freefem el problema de calculo de temperatura
    - conveccion aire u = 20 grados
    - conveccion y radiacion fluido = 80 grados
 
 Se disponen de dos materiales, cobre y aluminio
 Puntos del cobres
 a = (0,6) b = (0,3) c = (5,3) d = (5,6)

 Puntos del aluminio
 a = (0,0) b = (10,0) c = (10,6) d = (5,6) e = (5,3) f = (0,3)

*/

// Estudiamos el caso estacionario
// Bordes del cobre

border a (t=0,10) {x=t;y=0;label=3;}; // parte abajo

border b (t=0,6) {x=10;y=t;label=1;}; // parte derecha 

border c (t=10,5) {x=t;y=6;label=3;};

border d (t=5,0) {x=t;y=6;label=3;};

border e (t=6,3) {x=0;y=t;label=2;};

border f (t=3,0) {x=0;y=t;label=2;};

border g (t=0,5) {x=t;y=3;label=4;};

border h (t=3,6) {x=5;y=t;label=4;};


int n=10;

mesh malla = buildmesh(a(10*n)+b(6*n)+c(5*n)+d(5*n)+e(6*n)+f(3*n)+g(5*n)+h(3*n));

plot(malla, wait=1);

fespace Ph(malla,P1);
Ph reg=region;   

int cobre = reg (3.0,4.0);

int aluminio = reg (7.0,3.0); 

plot (reg,fill=1);

real hc = 14.;
real ha = 60.;

real emisivity = 0.3;
real sigma = 5.6704*1e-8;
real epsilon=1.e-6;

real uf1 = 20 + 273.15;
real uf2 = 80 + 273.15; //Temperatura UR del foco caliente [ÂºK]

fespace Vh(malla,P1);

Vh u,k,v,B,uu,uold,error;


problem calor(u,v) =
int2d(malla)(epsilon*u*v) +
int2d (malla) (k*dx(u)*dx(v)+k*dy(u)*dy(v)) +

int1d(malla,3) (hc*u*v) - int1d(malla,3) (hc*uf1*v) +
int1d(malla,2) (hc*u*v) - int1d(malla,2) (hc*uf1*v) +
int1d(malla,1) (ha*u*v) - int1d(malla,1) (ha*uf2*v) +
int1d(malla,1) (sigma*emisivity*B*u*v) - int1d(malla,1) (sigma*emisivity*B*uf2*v);

//3 - 2

//  + on (1,u=80)
//  + on (3,u=20)
//  + on (2,u=20);



k = hc*(region==cobre)+ha*(region==aluminio);

real ErrorL2 = 1.; 
real ErrorH1 = 1.;  

uold=uf2;

while(sqrt(ErrorL2+ErrorH1) > 1.e-6) {
   k = hc*(region==cobre)+ha*(region==aluminio);
   B = (uold^2 + uf2^2)*(uold+uf2);
   calor;
   error=u-uold;
	ErrorH1 = int2d(malla)(dx(error)^2+dy(error)^2);
	ErrorL2 = int2d(malla)(error^2);
	cout << " Error seminorma H1 = " <<sqrt( ErrorH1) <<endl;
	cout << " Error L2 = " << sqrt(ErrorL2) <<endl;
	cout << " Error norma H1 = " << sqrt(ErrorL2+ErrorH1) <<endl;
	uold=u; 
}



calor;
   
x=7.0;
y=3.0;
uu=u(x,y); // temperatura en la interfase corcho-vidrio

cout.fixed;
cout.precision(1);
cout <<  " u = " <<(uu - 273.15) <<endl; // plotea en pantalla
plot(u,nbiso=40,value=1);
